package {{.Package}}

import (
	"{{.Path}}/{{.Package}}/types"
)

//{{ funcName .Model}}Service is the service for {{ .ModelName }}
type {{ funcName .Model}}Service struct {
	client *Client
}

// New{{ funcName .Model}}Service returns a new {{ funcName .Model}} Service
func New{{ funcName .Model}}Service(c *Client) *{{ funcName .Model}}Service {
	return &{{ funcName .Model}}Service{client: c}
}

//GetIdsByName returns {{ funcName .Model}} ids given a name
func (svc *{{ funcName .Model}}Service) GetIdsByName(name string, options interface{}) ([]int64, error) {
	return svc.client.getIdsByName(types.{{ funcName .Model}}Model, name, options)
}

//GetByIds returns {{ funcName .Model}} with ids
func (svc *{{ funcName .Model}}Service) GetByIds(ids []int64, options interface{}) (*types.{{ funcName .Model}}s, error) {
	p := &types.{{ funcName .Model}}s{}
	return p, svc.client.getByIds(types.{{ funcName .Model}}Model, ids, options, p)
}

//GetByName returns {{ funcName .Model}} with matching name
func (svc *{{ funcName .Model}}Service) GetByName(name string, options interface{}) (*types.{{ funcName .Model}}s, error) {
	p := &types.{{ funcName .Model}}s{}
	return p, svc.client.getByName(types.{{ funcName .Model}}Model, name, options, p)
}

//SearchRead returns {{ funcName .Model}} with matching name
func (svc *{{ funcName .Model}}Service) SearchRead(args []interface{}, options interface{}) (*types.{{ funcName .Model}}s, error) {
	p := &types.{{ funcName .Model}}s{}
	return p, svc.client.SearchRead(types.{{ funcName .Model}}Model, args, options, p)
}

//GetByField returns {{ funcName .Model}} matching field and value
func (svc *{{ funcName .Model}}Service) GetByField(field string, value string, options interface{}) (*types.{{ funcName .Model}}s, error) {
	p := &types.{{ funcName .Model}}s{}
	return p, svc.client.getByField(types.{{ funcName .Model}}Model, field, value, options, p)
}

//GetAll returns all the {{ funcName .Model}}
func (svc *{{ funcName .Model}}Service) GetAll(options interface{}) (*types.{{ funcName .Model}}s, error) {
	p := &types.{{ funcName .Model}}s{}
	return p, svc.client.getAll(types.{{ funcName .Model}}Model, options, p)
}

//Create a new {{ funcName .Model}}
func (svc *{{ funcName .Model}}Service) Create(fields map[string]interface{}, relations *types.Relations, options interface{}) (int64, error) {
	return svc.client.create(types.{{ funcName .Model}}Model, fields, relations, options)
}

//Update updates fields of {{ funcName .Model}} specified with ids
func (svc *{{ funcName .Model}}Service) Update(ids []int64, fields map[string]interface{}, relations *types.Relations, options interface{}) error {
	return svc.client.update(types.{{ funcName .Model}}Model, ids, fields, relations, options)
}

//Delete deletes the {{ funcName .Model}} with ids
func (svc *{{ funcName .Model}}Service) Delete(ids []int64, options interface{}) error {
	return svc.client.delete(types.{{ funcName .Model}}Model, ids, options)
}
