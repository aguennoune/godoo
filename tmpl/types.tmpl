package types
{{ if .Time }}
import(
	"time"
)
{{end}}

//{{ .CamelModelName }} is a ODOO model for {{ .ModelName }}
type {{ .CamelModelName }} struct {
{{ range $key, $field := .Fields }}{{ $field.Name }} {{ $field.Type }} `xmlrpc:"{{ $field.SnakeName }}" json:"{{ $field.SnakeName }}"`
	{{end}} }

//{{ .CamelModelName }}Nil is a nil ODOO model for {{ .ModelName }}
type {{ .CamelModelName }}Nil struct {
	{{ range $key, $field := .Fields }}{{ $field.Name }} {{ $field.NilType }} `xmlrpc:"{{ $field.SnakeName }}" json:"{{ $field.SnakeName }}"`
	{{end}} }

//{{ .CamelModelName }}Model is the ODOO model name
const {{ .CamelModelName }}Model = "{{ .ModelName }}"

//{{ .CamelModelName }}Fields is the list of field names
var {{ .CamelModelName }}Fields = []string{ {{ range .Fields }}
	"{{ .SnakeName }}",{{end}}
}

//{{ .CamelModelName }}s is a slice of {{ .CamelModelName }}
type {{ .CamelModelName }}s []{{ .CamelModelName }}

//{{ .CamelModelName }}sNil is a slice of {{ .CamelModelName }}Nil
type {{ .CamelModelName }}sNil []{{ .CamelModelName }}Nil

//NilableType returns a {{ .CamelModelName }}Nil
func (s *{{ .CamelModelName }}) NilableType() interface{} {
	return &{{ .CamelModelName }}Nil{}
}

//GetType returns
func (ns *{{ .CamelModelName }}Nil) GetType() interface{} {
	s := &{{ .CamelModelName }}{}
	return load(ns, s)
}

//NilableType returns
func (s *{{ .CamelModelName }}s) NilableType() interface{} {
	return &{{ .CamelModelName }}sNil{}
}

//GetType returns
func (ns *{{ .CamelModelName }}sNil) GetType() interface{} {
	s := &{{ .CamelModelName }}s{}
	for _, nsi := range *ns {
		*s = append(*s, *nsi.GetType().(*{{ .CamelModelName }}))
	}
	return s
}
